const fs = require('fs');
const path = require('path');

// Since we can't directly import TypeScript, we'll manually extract the API registry data
// This should mirror the structure in src/config/api-registry.ts
const API_REGISTRY = {
  replicate: {
    packageName: 'replicate',
    packageVersion: '0.18.0',
    defaultEnabled: true,
  },
  anthropic: {
    packageName: '@anthropic-ai/sdk',
    packageVersion: '0.36.3',
    defaultEnabled: true,
  },
  openai: {
    packageName: 'openai',
    packageVersion: '4.6.0',
    defaultEnabled: true,
  },
  deepgram: {
    packageName: '@deepgram/sdk',
    packageVersion: '2.4.0',
    defaultEnabled: true,
  },
  resend: {
    packageName: 'resend',
    packageVersion: '1.1.0',
    defaultEnabled: true,
  },
  mediawiki: {
    packageName: 'wikijs',
    packageVersion: '6.4.1',
    defaultEnabled: true,
  },
  'react-pdf': {
    packageName: '@react-pdf/renderer',
    packageVersion: '3.1.12',
    defaultEnabled: true,
  },
  stripe: {
    packageName: 'stripe',
    packageVersion: '13.3.0',
    defaultEnabled: true,
  },
  elevenlabs: {
    packageName: 'elevenlabs-node',
    packageVersion: '1.1.1',
    defaultEnabled: true,
  },
};

// Get APIs from command line arguments
const enabledApis = process.argv.slice(2);
console.log(`Enabling APIs: ${enabledApis.join(', ')}`);

// All available APIs from the registry
const allApis = Object.keys(API_REGISTRY);

// Generate config file content
const generateConfigContent = () => {
  const typeDefinition = `// This file is auto-generated by configure-apis.js
// Import from the centralized registry
import { ApiName, ApiEnabledState } from './api-registry';

// Export the ApiName type for convenience
export type { ApiName };

`;
  
  const enabledApisObject = `// Configuration for which APIs are enabled
export const ENABLED_APIS: ApiEnabledState = {
${allApis.map(api => `  ${api === 'react-pdf' ? `'${api}'` : api}: ${enabledApis.includes(api)}`).join(',\n')}
};\n\n`;
  
  const isApiEnabledFunction = `/**
 * Checks if a specific API is enabled for this project
 */
export function isApiEnabled(api: ApiName): boolean {
  return ENABLED_APIS[api];
}

/**
 * Gets environment variable name for a specific API
 */
export function getApiEnvVar(api: ApiName): string {
  const registry = require('./api-registry').API_REGISTRY;
  return registry[api].envVar;
}
`;

  return `${typeDefinition}${enabledApisObject}${isApiEnabledFunction}`;
};

// Write config file
fs.writeFileSync(
  path.join(__dirname, '..', 'src', 'config', 'api-config.ts'),
  generateConfigContent()
);

// Update package.json to remove unused dependencies
const packageJsonPath = path.join(__dirname, '..', 'package.json');
const packageJson = require(packageJsonPath);

// Remove disabled API packages
const dependencies = packageJson.dependencies;
allApis.forEach(api => {
  if (!enabledApis.includes(api)) {
    const packageName = API_REGISTRY[api].packageName;
    if (dependencies[packageName]) {
      console.log(`Removing package: ${packageName}`);
      delete dependencies[packageName];
    }
  }
});

// Write updated package.json
fs.writeFileSync(
  packageJsonPath,
  JSON.stringify(packageJson, null, 2)
);

console.log('API configuration complete!'); 